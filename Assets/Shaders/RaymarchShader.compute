// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;
int _numShapes;
static const float PI = 3.14159265f;

#define NONE 0
#define SPHERE 1
#define CUBE 2
#define CYLINDER 3
#define BLACK_HOLE 4
#define DISK 5

struct Object {
    int shape;
    float3 worldPos;
    float3 size;
    float4 surfaceColor;
    float4x4 trsMatrix;
};

StructuredBuffer<Object> dataBuffer;

static const int MAX_STEPS = 128;
static const float MAX_DIST = 5;
static const float EPSILON = 0.001f;

struct Ray {
    float3 origin;
    float3 direction;
};

Ray CreateRay(float3 origin, float3 direction) {
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    return ray;
}

Ray CreateCameraRay(float2 uv) {
    float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;

    float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;

    direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);
    
    return CreateRay(origin, direction);
}

#include "./Transform.cginc"
#include "./DistanceFunctions.cginc"

float SDFScene(inout Ray ray, Object obj) {
    float3 pos = mul(obj.trsMatrix, float4(ray.origin, 1)).xyz;

    switch(obj.shape) {
        case SPHERE:
            return SDFSphere(float3(0, 0, 0), pos, 1.0f);
        case CUBE:
            return SDFCuboid(float3(0, 0, 0), pos);
        case CYLINDER:
            return SDFCylinder(float3(0, 0, 0), pos);
        case BLACK_HOLE:
            return SDFBlackHole(float3(0, 0, 0), pos, ray);
        case DISK:
            return SDFDisk(float3(0, 0, 0), pos);
        default:
            return MAX_DIST;
    }
}

float4 raymarch(Ray ray) {
    for (int step = 0; step < MAX_STEPS; step++) {
        float dist = MAX_DIST;

        for (int i = 0; i < _numShapes; i++) {
            Object obj = dataBuffer[i];
            
            dist = min(SDFScene(ray, obj), dist);

            if (dist < EPSILON) {
                return obj.surfaceColor;
            }
        }

        ray.origin += dist * ray.direction;
    }

    return float4(ray.direction * 0.75f, 1.0f);
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!

    uint width, height;
    Result.GetDimensions(width, height);

    // Transform pixel to [-1,1] range
    float2 uv = float2((id.xy + float2(0.5f, 0.5f)) / float2(width, height) * 2.0f - 1.0f);
    // Get a ray for the UVs
    Ray ray = CreateCameraRay(uv);

    //Result[id.xy] = float4(id.x & id.y, (id.x & 15)/15.0, (id.y & 15)/15.0, 0.0);
    Result[id.xy] = raymarch(ray);
    /*float theta = acos(ray.direction.y) / -PI;
    float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
    Result[id.xy] = float4(phi, theta, 0.0f, 1.0f);*/
}
